-- Did you know you can make multiple CTEs? Here's the syntax
WITH <name> AS (Query)
, <name> AS (Query)
, <name> AS (Query)
SELECT ....


-- Get all actors that have been in the same films as the most popular actor
-- OPTION: Try to get it all in one go, or do this in steps (see 1-3)

-- 1. Get the actor_id of the most popular actor (ie the actor who as been in the most films)

WITH popular_actor AS (SELECT film_actor.actor_id, count(film_actor.actor_id), actor.first_name, actor.last_name
FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id
INNER JOIN film ON film.film_id = film_actor.film_id
GROUP BY actor.actor_id, film_actor.actor_id
ORDER BY count(actor.actor_id) DESC
LIMIT 1)

SELECT *
FROM popular_actor;


-- 2. Using the answer from above (actor_id 107), get a list of all the films that
-- actor has been in.

WITH most_films AS ( SELECT film_actor.actor_id, actor.first_name, actor.last_name, film_actor.film_id, film.title
FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id
INNER JOIN film ON film.film_id = film_actor.film_id
WHERE film_actor.actor_id = 107
GROUP BY actor.actor_id, film_actor.actor_id, film_actor.film_id, film.title) 


SELECT * FROM most_films;

-- 3. USING the list from the previous answer (going to have to use a CTE or subquery),
-- get a list of the names of all the actors that have been in those films 
-- (ie all the actors that have acted with the most popular actor)
-- BONUS: exclude the most popular actor from the list.


-- 4. Can you do all of the above in one SQL execution (using multiple subqueries/CTE's)?
-- Get all actors that have been in the same films as the most popular actor
-- BONUS: exclude the most popular actor from the list.